// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_tenant_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpTenantApiClient is the client API for OcpTenantApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpTenantApiClient interface {
	CreateTenantV1(ctx context.Context, in *CreateTenantV1Request, opts ...grpc.CallOption) (*CreateTenantV1Response, error)
	DescribeTenantV1(ctx context.Context, in *DescribeTenantV1Request, opts ...grpc.CallOption) (*DescribeTenantV1Response, error)
	ListTenantsV1(ctx context.Context, in *ListTenantsV1Request, opts ...grpc.CallOption) (*ListTenantsV1Response, error)
	RemoveTenantV1(ctx context.Context, in *RemoveTenantV1Request, opts ...grpc.CallOption) (*RemoveTenantV1Response, error)
}

type ocpTenantApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpTenantApiClient(cc grpc.ClientConnInterface) OcpTenantApiClient {
	return &ocpTenantApiClient{cc}
}

func (c *ocpTenantApiClient) CreateTenantV1(ctx context.Context, in *CreateTenantV1Request, opts ...grpc.CallOption) (*CreateTenantV1Response, error) {
	out := new(CreateTenantV1Response)
	err := c.cc.Invoke(ctx, "/ocp.tenant.api.OcpTenantApi/CreateTenantV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpTenantApiClient) DescribeTenantV1(ctx context.Context, in *DescribeTenantV1Request, opts ...grpc.CallOption) (*DescribeTenantV1Response, error) {
	out := new(DescribeTenantV1Response)
	err := c.cc.Invoke(ctx, "/ocp.tenant.api.OcpTenantApi/DescribeTenantV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpTenantApiClient) ListTenantsV1(ctx context.Context, in *ListTenantsV1Request, opts ...grpc.CallOption) (*ListTenantsV1Response, error) {
	out := new(ListTenantsV1Response)
	err := c.cc.Invoke(ctx, "/ocp.tenant.api.OcpTenantApi/ListTenantsV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpTenantApiClient) RemoveTenantV1(ctx context.Context, in *RemoveTenantV1Request, opts ...grpc.CallOption) (*RemoveTenantV1Response, error) {
	out := new(RemoveTenantV1Response)
	err := c.cc.Invoke(ctx, "/ocp.tenant.api.OcpTenantApi/RemoveTenantV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpTenantApiServer is the server API for OcpTenantApi service.
// All implementations must embed UnimplementedOcpTenantApiServer
// for forward compatibility
type OcpTenantApiServer interface {
	CreateTenantV1(context.Context, *CreateTenantV1Request) (*CreateTenantV1Response, error)
	DescribeTenantV1(context.Context, *DescribeTenantV1Request) (*DescribeTenantV1Response, error)
	ListTenantsV1(context.Context, *ListTenantsV1Request) (*ListTenantsV1Response, error)
	RemoveTenantV1(context.Context, *RemoveTenantV1Request) (*RemoveTenantV1Response, error)
	mustEmbedUnimplementedOcpTenantApiServer()
}

// UnimplementedOcpTenantApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpTenantApiServer struct {
}

func (UnimplementedOcpTenantApiServer) CreateTenantV1(context.Context, *CreateTenantV1Request) (*CreateTenantV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTenantV1 not implemented")
}
func (UnimplementedOcpTenantApiServer) DescribeTenantV1(context.Context, *DescribeTenantV1Request) (*DescribeTenantV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTenantV1 not implemented")
}
func (UnimplementedOcpTenantApiServer) ListTenantsV1(context.Context, *ListTenantsV1Request) (*ListTenantsV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTenantsV1 not implemented")
}
func (UnimplementedOcpTenantApiServer) RemoveTenantV1(context.Context, *RemoveTenantV1Request) (*RemoveTenantV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTenantV1 not implemented")
}
func (UnimplementedOcpTenantApiServer) mustEmbedUnimplementedOcpTenantApiServer() {}

// UnsafeOcpTenantApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpTenantApiServer will
// result in compilation errors.
type UnsafeOcpTenantApiServer interface {
	mustEmbedUnimplementedOcpTenantApiServer()
}

func RegisterOcpTenantApiServer(s grpc.ServiceRegistrar, srv OcpTenantApiServer) {
	s.RegisterService(&OcpTenantApi_ServiceDesc, srv)
}

func _OcpTenantApi_CreateTenantV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTenantV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpTenantApiServer).CreateTenantV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.tenant.api.OcpTenantApi/CreateTenantV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpTenantApiServer).CreateTenantV1(ctx, req.(*CreateTenantV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpTenantApi_DescribeTenantV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTenantV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpTenantApiServer).DescribeTenantV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.tenant.api.OcpTenantApi/DescribeTenantV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpTenantApiServer).DescribeTenantV1(ctx, req.(*DescribeTenantV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpTenantApi_ListTenantsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTenantsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpTenantApiServer).ListTenantsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.tenant.api.OcpTenantApi/ListTenantsV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpTenantApiServer).ListTenantsV1(ctx, req.(*ListTenantsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpTenantApi_RemoveTenantV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTenantV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpTenantApiServer).RemoveTenantV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.tenant.api.OcpTenantApi/RemoveTenantV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpTenantApiServer).RemoveTenantV1(ctx, req.(*RemoveTenantV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpTenantApi_ServiceDesc is the grpc.ServiceDesc for OcpTenantApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpTenantApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.tenant.api.OcpTenantApi",
	HandlerType: (*OcpTenantApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTenantV1",
			Handler:    _OcpTenantApi_CreateTenantV1_Handler,
		},
		{
			MethodName: "DescribeTenantV1",
			Handler:    _OcpTenantApi_DescribeTenantV1_Handler,
		},
		{
			MethodName: "ListTenantsV1",
			Handler:    _OcpTenantApi_ListTenantsV1_Handler,
		},
		{
			MethodName: "RemoveTenantV1",
			Handler:    _OcpTenantApi_RemoveTenantV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ocp-tenant-api/ocp-tenant-api.proto",
}
